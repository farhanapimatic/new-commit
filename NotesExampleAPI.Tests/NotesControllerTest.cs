/*
 * NotesExampleAPI.Tests
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using NotesExampleAPI.PCL;
using NotesExampleAPI.PCL.Utilities; 
using NotesExampleAPI.PCL.Http.Client;
using NotesExampleAPI.PCL.Http.Response;
using NotesExampleAPI.Tests.Helpers;
using NUnit.Framework;
using NotesExampleAPI.PCL;
using NotesExampleAPI.PCL.Controllers;
using NotesExampleAPI.PCL.Exceptions;

namespace NotesExampleAPI.Tests
{
    [TestFixture]
    public class NotesControllerTest : ControllerTestBase
    {
        /// <summary>
        /// Controller instance (for all tests)
        /// </summary>
        private static NotesController controller;

        /// <summary>
        /// Setup test class
        /// </summary>
        [SetUp]
        public static void SetUpClass()
        {
            controller = GetClient().Notes;
        }

        /// <summary>
        /// Remove the specified note 
        /// </summary>
        [Test]
        public async Task TestNotesById1() 
        {
            // Parameters for the API call
            int id = 2;

            // Perform API call

            try
            {
                await controller.DeleteNotesByIdAsync(id);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(204, httpCallBackHandler.Response.StatusCode,
                    "Status should be 204");

        }

        /// <summary>
        /// Retrieve the specified note 
        /// </summary>
        [Test]
        public async Task TestNotesById() 
        {
            // Parameters for the API call
            int id = 2;

            // Perform API call
            PCL.Models.NotesResponse result = null;

            try
            {
                result = await controller.GetNotesByIdAsync(id);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.AreEqual("{  \"id\": 2,  \"title\": \"Return sweater\",   \"status\": \"overdue\",  \"dueInDays\": -2}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody),
                    "Response body should match exactly (string literal match)");
        }

        /// <summary>
        /// Create a new note in the collection 
        /// </summary>
        [Test]
        public async Task TestNotes() 
        {
            // Parameters for the API call
            PCL.Models.NotesRequest body = APIHelper.JsonDeserialize<PCL.Models.NotesRequest>("{ \"title\": \"Return sweater\", \"dueInDays\": -2 }");
            PCL.Models.XTrackingExampleEnum xTrackingExample = PCL.Models.XTrackingExampleEnumHelper.ParseString("accounting");

            // Perform API call
            PCL.Models.NotesResponse result = null;

            try
            {
                result = await controller.CreateNotesAsync(body, xTrackingExample);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(201, httpCallBackHandler.Response.StatusCode,
                    "Status should be 201");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.AreEqual("{   \"id\": 2,  \"title\": \"Return sweater\",   \"status\": \"overdue\",  \"dueInDays\": -2}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody),
                    "Response body should match exactly (string literal match)");
        }

    }
}